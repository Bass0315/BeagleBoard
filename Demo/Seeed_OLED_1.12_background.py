"""
Reference resources : 
	https://github.com/Seeed-Studio/MotorBridgeCapeforBBG_BBB/blob/master/BBG_MotorBridgeCape/MotorBridge.py   #0.96 oled python feil
	https://github.com/Seeed-Studio/OLED_Display_96X96							                               #1.12 oled C feil
	https://github.com/adafruit/Adafruit_Python_GPIO								                           #Adafruit oled python feil
"""
import os
import sys
import Adafruit_GPIO.I2C as I2C
import time


#addr = int(sys.argv[1])
#bus = int(sys.argv[2])
#User_OLED = oled(addr, bus, sys.argv[3])
#User_OLED.oled_init()

class oled():
    def __init__(self, address, iicbus, IC):
        self.Command_Mode=0x80
        self.Data_mode=0x40
    
        self.grayH= 0xF0
        self.grayL= 0x0F
        self.Normal_Display_Cmd=0xA4
    
        self.oled_Device = I2C.Device(address, iicbus)
        self.Drive_IC = IC
    
        self.BasicFont = [[0 for x in xrange(8)] for x in xrange(10)]
        self.BasicFont=[[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
        [0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00],
        [0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00],
        [0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00],
        [0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00],
        [0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00],
        [0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00],
        [0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00],
        [0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00],
        [0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00],
        [0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00],
        [0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00],
        [0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00],
        [0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00],
        [0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00],
        [0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00],
        [0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00],
        [0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00],
        [0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00],
        [0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00],
        [0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00],
        [0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00],
        [0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00],
        [0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00],
        [0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00],
        [0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00],
        [0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00],
        [0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00],
        [0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00],
        [0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00],
        [0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00],
        [0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00],
        [0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00],
        [0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00],
        [0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00],
        [0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00],
        [0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00],
        [0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00],
        [0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00],
        [0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00],
        [0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00],
        [0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00],
        [0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00],
        [0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00],
        [0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00],
        [0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00],
        [0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00],
        [0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00],
        [0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00],
        [0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00],
        [0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00],
        [0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00],
        [0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00],
        [0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00],
        [0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00],
        [0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00],
        [0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00],
        [0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00],
        [0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00],
        [0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00],
        [0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00],
        [0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00],
        [0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00],
        [0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00],
        [0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00],
        [0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00],
        [0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00],
        [0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00],
        [0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00],
        [0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00],
        [0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00],
        [0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00],
        [0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00],
        [0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00],
        [0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00],
        [0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00],
        [0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00],
        [0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00],
        [0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00],
        [0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00],
        [0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00],
        [0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00],
        [0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00],
        [0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00],
        [0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00],
        [0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00],
        [0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00],
        [0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00],
        [0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00],
        [0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00],
        [0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00],
        [0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00],
        [0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00],
        [0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00],
        [0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00],
        [0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00]]

    def oled_init(self):  #input string

        if self.Drive_IC == "SSD1327":
            self.sendCommand(0xFD) # Unlock OLED driver IC MCU interface from entering command. i.e: Accept commands
            self.sendCommand(0x12)
            self.sendCommand(0xAE) # Set display off
            self.sendCommand(0xA8) # set multiplex ratio
            self.sendCommand(0x5F) # 96
            self.sendCommand(0xA1) # set display start line
            self.sendCommand(0x00)
            self.sendCommand(0xA2) # set display offset
            self.sendCommand(0x60)
            self.sendCommand(0xA0) # set remap
            self.sendCommand(0x46)
            self.sendCommand(0xAB) # set vdd internal
            self.sendCommand(0x01)
            self.sendCommand(0x81) # set contrasr
            self.sendCommand(0x53) # 100 nit
            self.sendCommand(0xB1) # Set Phase Length
            self.sendCommand(0X51)
            self.sendCommand(0xB3) # Set Display Clock Divide Ratio/Oscillator Frequency
            self.sendCommand(0x01)
            self.sendCommand(0xB9)
            self.sendCommand(0xBC) # set pre_charge voltage/VCOMH
            self.sendCommand(0x08) # (0x08)
            self.sendCommand(0xBE) # set VCOMH
            self.sendCommand(0X07) # (0x07)
            self.sendCommand(0xB6) # Set second pre-charge period
            self.sendCommand(0x01)
            self.sendCommand(0xD5) # enable second precharge and enternal vsl
            self.sendCommand(0X62) # (0x62)
            self.sendCommand(0xA4) # Set Normal Display Mode
            self.sendCommand(0x2E) # Deactivate Scroll
            self.sendCommand(0xAF) # Switch on display
            time.sleep(0.1)
            # delay(100)
        
            # Row Address
            self.sendCommand(0x75)    # Set Row Address
            self.sendCommand(0x00)    # Start 0
            self.sendCommand(0x5f)    # End 95
        
            # Column Address
            self.sendCommand(0x15)    # Set Column Address
            self.sendCommand(0x08)    # Start from 8th Column of driver IC. This is 0th Column for OLED
            self.sendCommand(0x37)    # End at  (8 + 47)th column. Each Column has 2 pixels(segments)
        
            # Init gray level for text. Default:Brightest White
            self.grayH = 0xF0
            self.grayL = 0x0F
        elif self.Drive_IC == "SH1107G":
            self.sendCommand(0xae)  #Display OFF
            self.sendCommand(0xd5)  # Set Dclk
            self.sendCommand(0x50)  # 100Hz
            self.sendCommand(0x20)  # Set row address
            self.sendCommand(0x81)  # Set contrast control
            self.sendCommand(0x80)
            self.sendCommand(0xa0)  # Segment remap
            self.sendCommand(0xa4)  # Set Entire Display ON
            self.sendCommand(0xa6)  # Normal display
            self.sendCommand(0xad)  # Set external VCC
            self.sendCommand(0x80)
            self.sendCommand(0xc0)  # Set Common scan direction
            self.sendCommand(0xd9)  # Set phase leghth
            self.sendCommand(0x1f)
            self.sendCommand(0xdb)  # Set Vcomh voltage
            self.sendCommand(0x27)
            self.sendCommand(0xaf)  # Display ON
            self.sendCommand(0xb0)
            self.sendCommand(0x00)
            self.sendCommand(0x11)   
        else:
            pass
        self.oled_setNormalDisplay()
        self.oled_clearDisplay()
        

    def sendCommand(self, byte):
        self.oled_Device.write8(self.Command_Mode,byte)
 
    def sendData(self, byte):
        self.oled_Device.write8(self.Data_mode,byte)

    def oled_setNormalDisplay(self):
        self.sendCommand(self.Normal_Display_Cmd) 
 
    def oled_clearDisplay(self):
        if self.Drive_IC == "SSD1327" :
            for i in range(0,48,1) :
                for j in range(0,96,1) :  #clear all columns
                    self.sendData(0x00)            
        elif self.Drive_IC == "SH1107G" :
            for  i in range(0,16,1) :
                self.sendCommand(0xb0 + i)
                self.sendCommand(0x0)
                self.sendCommand(0x10)
                for j in range(0,128,1) : 
                    self.sendData(0x00)
 

    def oled_setTextXY(self, Row, Column) : 
        if self.Drive_IC == "SSD1327" :  
            #Column Address
            self.sendCommand(0x15)             # Set Column Address */
            self.sendCommand(0x08 + (Column * 4)) # Start Column: Start from 8 */
            self.sendCommand(0x37)             # End Column */
            # Row Address
            self.sendCommand(0x75)             # Set Row Address */
            self.sendCommand(0x00 + (Row * 8)) # Start Row*/
            self.sendCommand(0x07 + (Row * 8)) # End Row*/
        elif self.Drive_IC == "SH1107G" : 
            self.sendCommand(0xb0 + (Row & 0x0F)) # set page/row
            self.sendCommand(0x10 + ((Column >> 4) & 0x07)) # set column high 3 byte
            self.sendCommand(Column & 0x0F)  # set column low 4 byte
        else :
            pass

    
    def oled_putChar(self, C):
        C_add = ord(C)
        if C_add<32 or C_add>127:     # Ignore non-printable ASCII characters
            C = ' '
            C_add = ord(C)
 
        if self.Drive_IC == "SSD1327" :
            for i in range(0, 8, 2) :
                for j in range(0, 8, 1) :
                    # Character is constructed two pixel at a time using vertical mode from the default 8x8 font
                    c = 0x00
                    bit1=((BasicFont[C_add-32][i])>>j)&0x01
                    bit2=((BasicFont[C_add-32][i+1])>>j)&0x01
                    # Each bit is changed to a nibble
                    if bit1:
                        c=c|grayH
                    else:
                        c=c|0x00
                    if bit2:
                        c=c|grayL
                    else:
                        c=c|0x00
                        
                    self.sendData(c)
                    
        elif self.Drive_IC == "SH1107G" : 
            for i in range(0, 8, 1) :
                # read bytes from code memory
                self.sendData((self.BasicFont[C_add - 32][i])) #//font array starts at 0, ASCII starts at 32. Hence the translation
        else :
            pass
 
    def oled_putString(self, String):
        for i in range(len(String)):
            self.oled_putChar(String[i])


    def oled_putString_xy(self, str_x, str_y, String) :           
        self.oled_setTextXY(str_y,str_x)
        self.oled_putString(String)


if __name__=="__main__":
    data_list = [ ]
    if len(sys.argv) < 2:
        print("Usage: {} filename filepath")
        quit(1)
    addr = int(sys.argv[1])
    bus = int(sys.argv[2])
    User_OLED = oled(addr, bus, sys.argv[3])
    User_OLED.oled_init()
    os.system("echo "" > oled.txt")
    
    while True:
        f = open("oled.txt","r")
        #str = f.read()
        data_list = f.readlines()
        print(data_list)
        print(len(data_list))
        
        for i in range(0, len(data_list), 1):
            if "clear" in data_list[i]:
                os.system("echo "" > oled.txt")
                User_OLED.oled_clearDisplay()
            elif i > 15 :
                User_OLED.oled_clearDisplay()
                os.system("echo "" > oled.txt")
            else :
                User_OLED.oled_putString_xy(0, (i+1), data_list[i])      
                
        f.close()   
        time.sleep(0.5)

""" 
# shell:
# python Seeed_OLED_1.12.py "display" "60" "2" "SH1107G" "0" "0" "Hello,world!!"

# sys.argv[1] : display or clear
# sys.argv[2] : OLED IIC address
# sys.argv[3] : IIC bus
# sys.argv[4] : OLED IC (SSD1327 or SH1107G)
# sys.argv[5] : display x 
# sys.argv[6] : display y
# sys.argv[7] : content
"""


